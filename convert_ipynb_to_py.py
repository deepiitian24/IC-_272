#!/usr/bin/env python3
import json
import os
import sys
from typing import List, Union


def load_notebook(notebook_path: str) -> dict:
    with open(notebook_path, "r", encoding="utf-8") as f:
        return json.load(f)


def normalize_source(source: Union[str, List[str]]) -> str:
    if isinstance(source, list):
        return "".join(source)
    return source or ""


def extract_code_cells(nb: dict) -> List[str]:
    cells = nb.get("cells", [])
    output_chunks: List[str] = []
    cell_index = 0
    for cell in cells:
        if cell.get("cell_type") != "code":
            continue
        cell_index += 1
        source = normalize_source(cell.get("source", ""))
        # Add a visible separator between cells
        output_chunks.append(f"\n# ==== Notebook code cell {cell_index} ====\n")
        output_chunks.append(source.rstrip() + "\n")
    return output_chunks


def write_script(output_path: str, chunks: List[str], original_path: str) -> None:
    header = (
        "# Auto-generated from notebook: "
        + os.path.basename(original_path)
        + "\n# Do not edit this file directly; edit the notebook instead.\n\n"
    )
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(header)
        for chunk in chunks:
            f.write(chunk)


def main() -> int:
    if len(sys.argv) != 3:
        print("Usage: convert_ipynb_to_py.py <input.ipynb> <output.py>", file=sys.stderr)
        return 2
    input_path = sys.argv[1]
    output_path = sys.argv[2]

    if not os.path.exists(input_path):
        print(f"Input notebook not found: {input_path}", file=sys.stderr)
        return 1

    try:
        nb = load_notebook(input_path)
        chunks = extract_code_cells(nb)
        write_script(output_path, chunks, input_path)
    except Exception as exc:
        print(f"Failed to convert notebook: {exc}", file=sys.stderr)
        return 1

    print(f"Wrote Python script: {output_path}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
